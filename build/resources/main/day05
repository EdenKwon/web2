1. JDBC 연동(HikariCP) Connection Pool
    DAO 구성하고 서비스 객체와 컨트롤러 객체를 연동해서 실행 가능한 Todo Service 구현

    3tier -> 프레젠테이션, 비즈니스, 데이터 액세스 / 레이어 : 웹 아키텍트 기본 구조

...dto VS vo는 velog에

5. sout() => log(로그) 기능 제공 log4j2 이용한다.
   Log4j2 레벨 설정 : 개발 시 레벨의 로그, 운영 시 레벨 로그
   - 로그의 레벨 설정 : FATAL(상위 레벨) -> ERROR -> WARN -> INFO -> DEBUG -> TRACE(하위 레벨)
   운영 시 FATAL -> ERROR -> WARN 이상
   개발 시 INFO 이하로 세팅해서 사용

   - 어펜더(Appenders) : 로그를 어떤 방식으로 기록할 것인 지를 정하는 것


   <?xml version="1.0" encoding="UTF-8"?>
   <configuration status="INFO">
       <Appenders>
           <!-- 콘솔 -->
           <Console name="console" target="SYSTEM_OUT">
               <PatternLayout charset="UTF-8" pattern="%d{hh:mm:ss} %5p [%c] %m%n"/>
           </Console>
       </Appenders>
       <loggers>
           <logger name="org.springframework" level="INFO" additivity="false">
               <appender-ref ref="console" />
           </logger>
           <logger name="com.ssg" level="INFO" additivity="false">
               <appender-ref ref="console" />
           </logger>
           <root level="INFO" additivity="false">
               <AppenderRef ref="console"/>
           </root>
       </loggers>
   </configuration>

   ---------------------------------------------------------------------------------------
   6. TodoService와 TodoDAO의 연동 확인 완료
      서블릿으로 작성되어 있는 컨트롤러와 TodoService 연동 작업

   ---------------------------------------------------------------------------------------
   7.
    1)Todo의 등록 기능은 GET 방식으로 등록화면을 보여준다.
    2)사용자는 register.jsp -> <form></form> 태그 내의 입력항목을 입력하여 POST 방식으로 처리

   8. 해당 TOdo APP ver1.0 개선 사항
    - 웹 MVC 구조는 확실한 책임과 역할을 부여할 수 있는 장점이 있다.
    - 단점
        1) 여러 개의 컨트롤러들을 작성하는 번거로움
        2) 동일한 로직이 반족처리 -> 게시물의 조회, 수정 get 동작으로 동작하지만, 결과를 보여주려면 JSP만 다른 형태의
        반복적인 상황 발생
        3) 예외처리 -> 예외가 발생하면 어떤 식으로 처리할 지에 대한 설계가 없기 때문에 문제 발생 시 대비가 안되는 상황
        4) 반복적인 메서드 호출 -> HTTPServletRequest ,HTTPSServletResponse를 이용해서, TOdoDto를 구성하는 작업
        Long.ParseLong(tno)

    스프링 프레임워크의 등장...
   -----------------------------------------------------------------------------------------

9. 세션, 쿠키, 필터, 리스너 (필수적 개념)
    과거의 상태를 저장하지 않는다. -> 무상태(stateLess)
    Request, Response 를 하나의 단위로 처리하면서 사용자에 대한 정보를 기억하지 않는다.

    무상태(stateless)
    기존의 방문자를 기억하기 위해선 메커니즘이 필요하다.
    - 세션 (HTTPSession) was가 만든다
    - 쿠키 (Cookie)
    - 특정한 문자(토큰)

-> 로그인 유지를 위한 모든 기능을 세션 트래킹(session Tracking)이라고 한다.

===============================================================================================================
Tomcat(was)에서 운영하는 서블릿 컨텍스트(servlet-context)

톰캣 내부의 세션 저장소는 발행된 쿠키(세션키=값)들의 정보를 저장하여 보관하는 세션저장소를 운영한다. 더 이상 사용하지 않는 값들을 정리하면서 운영한다.
session-timeout 프로퍼티를 이용하여 정리한다.(지정된 시간보다 오래된 값들은 주기적으로 검사를 진행하여 삭제) tomcat의 경우 기본 값 30min
